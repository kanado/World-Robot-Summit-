//I2C通信ライブラリを取り込む
#include <Wire.h>

//デジタルコンパスモジュールのアドレス設定
int compassAddress = 0x42 >> 1; //=0x21
//読み込み値（角度）の変数を用意
int reading = 0;
int kakudo = 0;
int hidari = 0;
int migi = 0;
int mae = 0;
int do_once = 0;
int tekitou = 0;
int tekitou_backlog= 0;
int kakudo_kijyunn = 0;
int kakudo_kijyunn_ookii = 0;
int kakudo_kijyunn_tiisai = 0;
const int pingPinA = 9;
const int pingPinB = 7;
const int pingPinC = 13;
const int pingPinD = 11;

unsigned long durationA;
int cm;
unsigned long durationB;
int cm1;
unsigned long durationC;
int cm2;
unsigned long durationD;
int cm3;

void Motor(char one, char two, char three, char four, char five, char six) {
  Wire.beginTransmission(0x14 / 2);
  Wire.write(0x00 + one); // 1ch
  Wire.write(0x00 + two); // 2ch
  Wire.write(0x00 + three); // 3ch
  Wire.write(0x00 + four); // 4ch
  Wire.write(0x00 + five); // 5ch
  Wire.write(0x00 + six); // 6ch : 0 しかダメ
  Wire.write(0); // ダミー
  Wire.endTransmission();
  delay(2); // このディレーがないと連続稼動せずハングアップ
}

void setup() {
  pinMode(pingPinA, OUTPUT);
  pinMode(pingPinB, OUTPUT);
  pinMode(pingPinC, OUTPUT);
  pinMode(pingPinD, OUTPUT);
  //I2C通信開始
  Wire.begin();
  //角度表示のためのシリアル通信開始
  Serial.begin(9600);

  //Continuous Modeに設定する
  Wire.beginTransmission(compassAddress);
  //RAM書き込み用コマンド
  Wire.write('G');
  //書き込み先指定
  Wire.write(0x74);
  //モード設定
  Wire.write(0x72);
  //通信終了
  Wire.endTransmission();
  //処理時間
  delayMicroseconds(70);
  Wire.begin(); // join i2c bus
}
void loop() {
  //pingPin
  //ピンをOUTPUTに設定（パルス送信のため）
  pinMode(pingPinA, OUTPUT);
  //LOWパルスを送信
  digitalWrite(pingPinA, LOW);
  delayMicroseconds(2);
  //HIGHパルスを送信
  digitalWrite(pingPinA, HIGH);
  //5uSパルスを送信してPingSensorを起動
  delayMicroseconds(5);
  digitalWrite(pingPinA, LOW);

  //入力パルスを読み取るためにデジタルピンをINPUTに変更（シグナルピンを入力に切り替え）
  pinMode(pingPinA, INPUT);

  //入力パルスの長さを測定
  durationA = pulseIn(pingPinA, HIGH);

  //パルスの長さを半分に分割
  durationA = durationA / 2;
  //cmに変換
  cm = int(durationA / 29);
  Serial.println("");
  Serial.println("前方");
  Serial.print(cm);
  Serial.println("cm");
  //pinPin1
  //ピンをOUTPUTに設定（パルス送信のため）
  pinMode(pingPinB, OUTPUT);
  //LOWパルスを送信
  digitalWrite(pingPinB, LOW);
  delayMicroseconds(2);
  //HIGHパルスを送信
  digitalWrite(pingPinB, HIGH);
  //5uSパルスを送信してPingSensorを起動
  delayMicroseconds(5);
  digitalWrite(pingPinB, LOW);

  //入力パルスを読み取るためにデジタルピンをINPUTに変更（シグナルピンを入力に切り替え）
  pinMode(pingPinB, INPUT);

  //入力パルスの長さを測定
  durationB = pulseIn(pingPinB, HIGH);

  //パルスの長さを半分に分割
  durationB = durationB / 2;
  //cmに変換
  cm1 = int(durationB / 29);
  Serial.println();
  Serial.println("後方");
  Serial.print(cm1);
  Serial.println("cm");


  //pingPin2
  //ピンをOUTPUTに設定（パルス送信のため）
  pinMode(pingPinC, OUTPUT);
  //LOWパルスを送信
  digitalWrite(pingPinC, LOW);
  delayMicroseconds(2);
  //HIGHパルスを送信
  digitalWrite(pingPinC, HIGH);
  //5uSパルスを送信してPingSensorを起動
  delayMicroseconds(5);
  digitalWrite(pingPinC, LOW);

  //入力パルスを読み取るためにデジタルピンをINPUTに変更（シグナルピンを入力に切り替え）
  pinMode(pingPinC, INPUT);

  //入力パルスの長さを測定
  durationC = pulseIn(pingPinC, HIGH);

  //パルスの長さを半分に分割
  durationC = durationC / 2;
  //cmに変換
  cm2 = int(durationC / 29);
  Serial.println();
  Serial.println("右方");
  Serial.print(cm2);
  Serial.println("cm");

  //pingPin3
  //ピンをOUTPUTに設定（パルス送信のため）
  pinMode(pingPinD, OUTPUT);
  //LOWパルスを送信
  digitalWrite(pingPinD, LOW);
  delayMicroseconds(2);
  //HIGHパルスを送信
  digitalWrite(pingPinD, HIGH);
  //5uSパルスを送信してPingSensorを起動
  delayMicroseconds(5);
  digitalWrite(pingPinD, LOW);

  //入力パルスを読み取るためにデジタルピンをINPUTに変更（シグナルピンを入力に切り替え）
  pinMode(pingPinD, INPUT);

  //入力パルスの長さを測定
  durationD = pulseIn(pingPinD, HIGH);

  //パルスの長さを半分に分割
  durationD = durationD / 2;
  cm3 = int(durationD / 29);
  //cmに変換
  Serial.println();
  Serial.println("左方");
  Serial.print(cm3);
  Serial.println("cm");
  Serial.println();
  Serial.println();
  //cmは前方
  //cm1は後方
  //cm2は右方
  //cm3は左方

  //デバイスに２バイト分のデータを要求する
  Wire.requestFrom(compassAddress, 2);
  //要求したデータが２バイト分来たら
  if (Wire.available() > 1)
  {
    //１バイト分のデータの読み込み
    reading = Wire.read();
    //読み込んだデータを８ビット左シフトしておく
    reading = reading << 8;
    //次の１バイト分のデータを読み込み
    //一つ目のデータと合成（２バイト）
    reading += Wire.read();
    //２バイト分のデータを１０で割る
    reading /= 10;
    kakudo = reading + 50;
    kakudo = kakudo + 300;
  }
  if (kakudo > 359) {
    kakudo = kakudo - 359;
  }
  Serial.println(kakudo);


  //処理のために少し待つ（20Hz）
  delay(50);
  if (do_once == 0 && kakudo_kijyunn == 0)
  {
    do_once++;
    kakudo_kijyunn = kakudo;
    kakudo_kijyunn_ookii = kakudo_kijyunn + 10;
    kakudo_kijyunn_tiisai = kakudo_kijyunn - 10;

  }
  else if (kakudo_kijyunn_ookii <= kakudo)
  {
    Motor(0, 0, 40, 0, -30, 0);
  }
  else if (kakudo_kijyunn_tiisai >= kakudo)
  {
    Motor(0, 0, -30, 0, 40, 0);
  }
  //前と左
  else if (cm3 <= 15 && cm <= 15 ) {
    Motor(50, 0, 0, 50, 0, 0);
    delay(1500);
    Motor(0, 0, -50, 0, -50, 0);
    delay(3000);
    tekitou_backlog = 1;
  }
  else if (cm <=15 && cm2 <=15){
    Motor(-50, 0, 0, -50, 0, 0);
    delay(1500);
    Motor(0, 0, -50, 0, -50, 0);
    delay(3000);
    tekitou_backlog = 0;
  }
 

  //後ろと右
  else if (cm1 <= 3 && cm2 <= 10) {
    Motor(-50, 0, 0, -50, 0, 0);
  }
  //後ろと左
  else if (cm1 <= 5 && cm3 <= 20) {
    Motor(0, 0, 0, 0, 0, 0);
  }
  //左
  if (cm3 <= 5) {
    Motor(50, 0, 0, 50, 0, 0);

  }
  //右
  else if (cm2 <= 5) {
    Motor(-50, 0, 0, -50, 0, 0);

    
  }
  //後ろ
  else if (cm1 <= 5) {
    Motor(0, 0, 50, 0, 50, 0);
  }
  //前
  else if (cm <= 20 && tekitou_backlog ==0) {
    Motor(-50, 0, 0, -50, 0, 0);
  }
  else if (cm <= 20 && tekitou_backlog ==1) {
    Motor(50, 0, 0, 50, 0, 0);
  }
  else
  {
    Motor(0, 0, 50, 0, 50, 0);
  }
}
